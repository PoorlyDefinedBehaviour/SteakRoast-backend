type User_Server {
  _id: String
  name: String
  owner: User_User
  logo: String
  staff: [User_User]
  members: [User_User]
  createdAt: String!
  updatedAt: String!
}

type User_User {
  _id: String
  username: String
  email: String
  avatar: String
  friends: [User_User]
  friend_requests: [User_User]
  servers: [User_Server]
  createdAt: String
  updatedAt: String
}

type User_Error {
  path: String
  message: String
}

type User_SingleResponse {
  status: Int!
  errors: [User_Error]
  token: String
  user: User_User
}

type User_MultipleResponse {
  status: Int!
  page: Int
  errors: [User_Error]
  users: [User_User]
}

type Query {
  user(_id: String!): User_SingleResponse!
  users(page: Int!): User_MultipleResponse!
}

type Mutation {
  register(
    username: String!
    email: String!
    password: String!
  ): User_SingleResponse!
  login(email: String!, password: String!): User_SingleResponse!
  send_friend_request(_id: String!): User_SingleResponse!
  accept_friend_request(_id: String!): User_SingleResponse!
  change_username(username: String!): User_SingleResponse!
  delete_account: User_SingleResponse!
  update_account(
    username: String!
    email: String!
    password: String!
  ): User_SingleResponse!
  deactivate_account: User_SingleResponse!
}
